from fltk import *
import random

class FloodGame(Fl_Window):
	
	'''Callback function for the color buttons'''
	def colorcb(self, wid, color):
		win=False #false until game is won
		self.attempts+=1
		self.outp.value(str(self.attempts))
		for but in self.flooded: #flooded boxes are changed to new color
			but.box(FL_DOWN_BOX)
			but.color(color)
			
		self.redraw()
		self.checkarea() #checks squares around the new colors of flooded squares
		
		if len(self.flooded)==196: #if whole grid is flooded
			win=True
			fl_message(f'You won in {self.attempts} moves!')
			self.outp.value('Winner!')
			
			for x in range(len(self.bl)):
				self.bl[x].deactivate()
				
			for y in range(len(self.colorbl)):
				self.colorbl[y].deactivate()
		
		if self.attempts==25 and win==False:
			
			for x in range(len(self.bl)):
				self.bl[x].deactivate()
				
			for y in range(len(self.colorbl)):
				self.colorbl[y].deactivate()
				
			fl_message('You lost!')
			self.outp.value('Failure')
			
			
			
	'''Function to check if nearby squares match color of flooded squares'''		
	def checkarea(self):
		for x in range(len(self.flooded)): #iterates over flooded squares
			i=self.bl.index(self.flooded[x]) #location of the flooded square in bl
			
			
			if i%14!=0: #edge case 
				if self.flooded[-1].color()==self.bl[i-1].color(): #if last square in flooded list matches color next to it
					if self.bl[i-1] not in self.flooded: #checks for duplicates
						self.flooded.append(self.bl[i-1]) 
						self.bl[i-1].box(FL_DOWN_BOX)
						self.checkarea() #recurses function
						
			
						
			if (i+1)%14!=0: #edge case
				if self.flooded[-1].color()==self.bl[i+1].color():
					if self.bl[i+1] not in self.flooded:
						self.flooded.append(self.bl[i+1])
						self.bl[i+1].box(FL_DOWN_BOX)
						self.checkarea()	
						
			if i-14 > -1: #edge case		
						
				if self.flooded[-1].color()==self.bl[i-14].color():
					if self.bl[i-14] not in self.flooded:
						self.flooded.append(self.bl[i-14])
						self.bl[i-14].box(FL_DOWN_BOX)
						self.checkarea()
						
			if i+15 < 197: #edge case
					
				if self.flooded[-1].color()==self.bl[i+14].color():
					if self.bl[i+14] not in self.flooded:
						self.flooded.append(self.bl[i+14])
						self.bl[i+14].box(FL_DOWN_BOX)
						self.checkarea()
						
		
	
	def __init__(self,x,y,w,h,label=None):
		Fl_Window.__init__(self, x, y, w, h, label)
		self.flooded=[]
		self.colors=[88,91, 94,102,145,183] #colors for grid
		self.attempts=0
		self.width=25
		self.bl=[]
		self.colorbl=[] #list of buttons that change flooded squares' colors
		self.outp=Fl_Output(40, 335, 100, 40)
		
		for x in range(6): #creates color buttons
			self.colorbut=Fl_Button(40, 25+52*x, 100, 40)
			self.colorbl.append(self.colorbut)
			self.colorbut.color(self.colors[x])
			self.colorbut.callback(self.colorcb, self.colors[x])
		
		for y in range(1,15): #creates grid
			for x in range(7,21):
				color=self.colors[random.randrange(len(self.colors))]
				self.but=Fl_Button(x*self.width, y*self.width, self.width,self.width)
				self.but.color(color)
				self.but.box(FL_FLAT_BOX)
				self.bl.append(self.but)
		
			
			
		self.flooded.append(self.bl[0])
		self.flooded[-1].box(FL_DOWN_BOX)
		self.checkarea()
		
		
x=Fl.w()//2-225
y=Fl.h()//2-200
w=550
h=400

game=FloodGame(x,y,w,h, 'Flood-It')

game.show()

Fl.run()




