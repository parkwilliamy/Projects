from fltk import *
from funcs import img_resize
import sys, socket
	
class Board(Fl_Window):
	
	
	def __init__(self,x,y,w,h,label=None):
		Fl_Window.__init__(self,x,y,w,h,label)
		self.wpieces=[] #list of white pieces
		self.bpieces=[] #list of black pieces
		self.bpawns=[]
		self.xpieces=[]
		images=['rook.png','knight.png','bishop.png','queen.png','king.png','pawn.png','rook2.png','knight2.png','bishop2.png','queen2.png','king2.png','pawn2.png']
		
		for name in images: 
			if images.index(name) >= 6:
				self.wpieces.append(img_resize(name, 100))
				
			else:
				self.bpieces.append(img_resize(name, 100))
		
		self.begin()
		self.width=100
		
		self.bl=[]
		
		for y in range(8):
			self.xcord=[]
			for x in range(8):
				self.but=Fl_Button(x*self.width, y*self.width, self.width,self.width)
				self.but.box(FL_FLAT_BOX)
				self.xcord.append(self.but)
				if y%2==0:
					if x%2==0:
						self.but.color(55,47) 
					else:
						self.but.color(229,179)
					
				if y%2==1:	
					if x%2==1:
						self.but.color(55,47)
					else:
						self.but.color(229,179)	
				
				
			self.bl.append(self.xcord)
			
		
		
		for col in range(8):
			self.bpawns.append(Piece(self.bpieces[5], col*100, 600, 100, 100))
		
		
		
		for col in range(5):
			self.xpieces.append(Piece(self.bpieces[col], col*100, 700, 100, 100))
			
		
		for col in range(3):
			self.xpieces.append(Piece(self.bpieces[2-col], col*100+500, 700, 100, 100))
			#self.bl[7][col+5].image(self.bpieces[2-col])
			
		
		self.end()
		
		self.show()

class Piece(Fl_Box):
	def __init__(self,pic, x, y, w, h):
		Fl_Box.__init__(self, x, y, w, h)
		self.box(FL_NO_BOX) # default: box is not drawn
		self.image(pic)
		self.dx=0 #offsets to top corner of box
		self.dy=0

	def handle(self, event):
		r = super().handle(event)
		if event==FL_PUSH:
			self.dx= Fl.event_x() - self.x()
			self.dy= Fl.event_y() - self.y()
			return 1
		elif event==FL_DRAG:
			X= Fl.event_x()
			Y= Fl.event_y()
			self.position(X-self.dx, Y-self.dy)
			self.parent().redraw()
			return 1
		elif event==FL_RELEASE:
			X= Fl.event_x()
			Y= Fl.event_y()
			self.position(X//100*100,Y//100*100)
			self.parent().redraw()

			return 1
		else:
			return r

	
	
	
	
	
	
	
	
	
	
'''	
class Rook(Piece):
	
class Pawn(Piece):
	
class Bishop(Piece):

class King(Piece):
	
class Queen(Piece):
'''
x=Fl.w()//2-400
y=Fl.h()//2-400	
w=800
h=800		

game=Board(x,y,w,h)

Fl_scheme('gtk+')

Fl.run()



