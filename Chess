from fltk import *
from funcs import img_resize
import sys, socket
	
class Board(Fl_Double_Window):
	game=[] #locations of pieces on all boards 
	locs={} #locations of pieces on the current board, key=piece type, value=location
	
	def butcb(self, wid):
		
		
		if len(Board.game) > 1:
			for piece, loc in Board.game[-1].items():
				piece.position(loc[0],loc[1])
				Board.locs[piece]=(loc[0],loc[1])
			
			Board.game.append(dict(Board.locs.items()))	
			
		print(len(Board.game))	
		self.redraw()
				
	
	def __init__(self,x,y,w,h,label=None):
		super().__init__(x,y,w,h,label)
		self.pieces=[] #list of tuples (piece, color)
		self.pawns=[]
		self.rooks=[]
		self.kings=[]
		self.queens=[]
		self.bishops=[]
		self.knights=[]
		
		images=['rook.png','knight.png','bishop.png','queen.png','king.png','pawn.png','rook2.png','knight2.png','bishop2.png','queen2.png','king2.png','pawn2.png']
		
		for name in images: 
			if images.index(name) >= 6:
				self.pieces.append((img_resize(name, 100), 'b'))
				
			else:
				self.pieces.append((img_resize(name, 100), 'w'))
		
		self.begin()
		self.width=100
		
		
		self.undo=Fl_Button(800,0,200,100,'Undo')
		self.undo.callback(self.butcb)
		
		self.bl=[]
		
		for y in range(8):
			self.xcord=[]
			for x in range(8):
				self.but=Fl_Button(x*self.width, y*self.width, self.width,self.width)
				self.but.box(FL_FLAT_BOX)
				self.xcord.append(self.but)
				if y%2==0:
					if x%2==0:
						self.but.color(55,47) 
					else:
						self.but.color(229,179)
					
				if y%2==1:	
					if x%2==1:
						self.but.color(55,47)
					else:
						self.but.color(229,179)	
				
				
			self.bl.append(self.xcord)
			
		'''PAWNS'''
		
		for col in range(8):
			self.pawns.append(Piece(self.pieces[5][0], col*100, 600, 100, 100))
			
			
		for col in range(8):
			self.pawns.append(Piece(self.pieces[11][0], col*100, 100, 100, 100))	
			
		
		'ROOKS'''
			
		self.rooks.append(Piece(self.pieces[0][0], 0, 700, 100,100))
		self.rooks.append(Piece(self.pieces[0][0], 700, 700, 100,100))
		self.rooks.append(Piece(self.pieces[6][0], 0, 0, 100,100))
		self.rooks.append(Piece(self.pieces[6][0], 700, 0, 100,100))
		
		
		'''BISHOPS'''
		self.bishops.append(Piece(self.pieces[2][0], 200, 700, 100,100))
		self.bishops.append(Piece(self.pieces[2][0], 500, 700, 100,100))
		self.bishops.append(Piece(self.pieces[8][0], 200, 0, 100,100))
		self.bishops.append(Piece(self.pieces[8][0], 500, 0, 100,100))
		
		
		'''KINGS'''
		self.kings.append(Piece(self.pieces[4][0], 400, 700, 100, 100))
		self.kings.append(Piece(self.pieces[10][0], 400, 0, 100, 100))
		
		
		'''QUEENS'''
		self.queens.append(Piece(self.pieces[3][0], 300, 700, 100, 100))
		self.queens.append(Piece(self.pieces[9][0], 300, 0, 100, 100))
		
		
		'''KNIGHTS'''
		self.knights.append(Piece(self.pieces[1][0], 100, 700, 100, 100))
		self.knights.append(Piece(self.pieces[1][0], 600, 700, 100, 100))
		self.knights.append(Piece(self.pieces[7][0], 100, 0, 100, 100))
		self.knights.append(Piece(self.pieces[7][0], 600, 0, 100, 100))
		
		
		self.end()
		
		self.show()

class Piece(Fl_Box):
	def __init__(self,pic, x, y, w, h):
		super().__init__(x, y, w, h)
		self.box(FL_NO_BOX) # default: box is not drawn
		self.image(pic)
		Board.locs[self]=(x,y)
		self.cx=self.x()
		self.cy=self.y()
		if len(Board.locs) == 32:
			Board.game.append(dict(Board.locs.items()))

	def handle(self, event):
		r = super().handle(event)
		
		if event==FL_PUSH:
			self.dx= Fl.event_x() - self.x()
			self.dy= Fl.event_y() - self.y()
			return 1
		elif event==FL_DRAG:
			X= Fl.event_x()
			Y= Fl.event_y()
			self.position(X-self.dx, Y-self.dy)
			self.parent().redraw()
			return 1
		elif event==FL_RELEASE:
			self.marked=[]
			X= Fl.event_x()
			Y= Fl.event_y()
			self.position(X//100*100,Y//100*100)
			Board.game.append(dict(Board.locs.items()))
			if X//100*100 < 0 or X//100*100 > 700 or Y//100*100 < 0 or Y//100*100 > 700:
				X=self.cx
				Y=self.cy
				self.position(X//100*100,Y//100*100)
				
			
			
			if (X//100*100,Y//100*100) in Board.locs.values() and (X//100*100,Y//100*100)!=(self.cx,self.cy):
				for piece, loc in Board.locs.items():
					if loc == (X//100*100,Y//100*100):
						self.marked.append(piece)
						piece.image(None)
						piece.position(10000,100000) #filler values to remove blank piece off grid
						
				Board.locs.pop(self.marked[0])
			
					
			Board.locs[self]=(X//100*100,Y//100*100)
						
			self.cx=X//100*100
			self.cy=Y//100*100			
						
			
			self.parent().redraw()
			

			return 1
		else:
			return r

	
x=Fl.w()//2-400
y=Fl.h()//2-400	
w=1000
h=800		

game=Board(x,y,w,h)

Fl_scheme('gleam')

Fl.run()



